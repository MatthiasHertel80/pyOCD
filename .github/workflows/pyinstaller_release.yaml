name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version <M>.<m>.<p>-standalone[-<feature>][+<build>]'
        required: true
        type: string
      run-id:
        description: 'Run ID of the build to release'
        required: true
        type: string

jobs:
  release:
    name: PyInstaller Create GH Release
    # Only run if triggered manually with version
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      # Check if release version is valid 
      - name: Check Version
        run: |
          if [[ ! ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+(-standalone)?(-[a-zA-Z0-9]+)?(\+[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: ${{ github.event.inputs.version }}"
            exit 1
          fi
      
      # Download artifacts from previous build
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.inputs.run-id }}
          path: artifacts
          merge-multiple: true

      - name: List artifacts
        run: |
          ls -la artifacts/
          find artifacts -type f
          
      # Rename artifacts to include version
      - name: Rename Build Artifacts
        run: |
          cd artifacts
          for artifact in pyocd-*; do
            if [ -d "$artifact" ]; then
              mv "$artifact" "${artifact}-${{ github.event.inputs.version }}"
            fi
          done

      # Add a CHECKSUM.TXT file to the artifacts with SHA256 checksums
      - name: Create Checksums
        run: |
          cd artifacts
          for artifact in pyocd-*; do
            if [ -d "$artifact" ]; then
              sha256sum "${artifact}.zip" > "${artifact}.zip.sha256"
            fi
          done
          
      # Create Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: |
            pyocd-*-${{ github.event.inputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}